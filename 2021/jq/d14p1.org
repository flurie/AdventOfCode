#+TITLE:  Day 14, Part 1

* [[https://adventofcode.com/2021/day/14][Day 14 - Advent of Code 2021]] :website:

[2021-12-23 Thu 00:19]

** Article

*** --- Day 14: Extended Polymerization ---

The incredible pressures at this depth are starting to put a strain on your submarine. The submarine has [[https://en.wikipedia.org/wiki/Polymerization][polymerization]] equipment that would produce suitable materials to reinforce the submarine, and the nearby volcanically-active caves should even have the necessary input elements in sufficient quantities.

The submarine manual contains instructions for finding the optimal polymer formula; specifically, it offers a /polymer template/ and a list of /pair insertion/ rules (your puzzle input). You just need to work out what polymer would result after repeating the pair insertion process a few times.

For example:

#+begin_src text :tangle d14test.txt
NNCB

CH -> B
HH -> N
CB -> H
NH -> C
HB -> C
HC -> B
HN -> C
NN -> C
BH -> H
NC -> B
NB -> B
BN -> B
BB -> N
BC -> B
CC -> N
CN -> C
#+end_src

The first line is the /polymer template/ - this is the starting point of the process.

The following section defines the /pair insertion/ rules. A rule like =AB -> C= means that when elements =A= and =B= are immediately adjacent, element =C= should be inserted between them. These insertions all happen simultaneously.

So, starting with the polymer template =NNCB=, the first step simultaneously considers all three pairs:

- The first pair ( =NN=) matches the rule =NN -> C=, so element = C= is inserted between the first =N= and the second =N=.
- The second pair ( =NC=) matches the rule =NC -> B=, so element = B= is inserted between the =N= and the =C=.
- The third pair ( =CB=) matches the rule =CB -> H=, so element = H= is inserted between the =C= and the =B=.

Note that these pairs overlap: the second element of one pair is the first element of the next pair. Also, because all pairs are considered simultaneously, inserted elements are not considered to be part of a pair until the next step.

After the first step of this process, the polymer becomes =N CN BC HB=.

Here are the results of a few steps using the above rules:

#+begin_src jq :cmd-line -nR :in-file d14test.txt
[inputs] | join(";")/";;" | map(split(";")) | [first[], reduce (last[] | split(" -> ")) as [$k, $v] ({}; . + {$k: $v})] as [$template, $rules]
  | $template
  | nth(10; recurse(
     reduce [range((. | length) - 1) * 2][] as $i (
       .; .[:$i+1] + $rules[.[$i:$i+2]] + .[$i+1:]
     ))
    ) | split("") | [group_by(.)[] | length] | sort | last - first
#+end_src

#+RESULTS:
: 1588


#+begin_example
   Template:     NNCB
  After step 1: NCNBCHB
  After step 2: NBCCNBBBCBHCB
  After step 3: NBBBCNCCNBBNBNBBCHBHHBCHB
  After step 4: NBBNBNBBCCNBCNCCNBBNBBNBBBNBBNBBCBHCBHHNHCBBCBHCB
#+end_example

This polymer grows quickly. After step 5, it has length 97; After step 10, it has length 3073. After step 10, =B= occurs 1749 times, =C= occurs 298 times, =H= occurs 161 times, and =N= occurs 865 times; taking the quantity of the most common element ( =B=, 1749) and subtracting the quantity of the least common element ( =H=, 161) produces =1749 - 161 =  1588=.

Apply 10 steps of pair insertion to the polymer template and find the most and least common elements in the result. /What do you get if you take the quantity of the most common element and subtract the quantity of the least common element?/

#+begin_src jq :cmd-line -nR :in-file d14input.txt
[inputs] | join(";")/";;" | map(split(";")) | [first[], reduce (last[] | split(" -> ")) as [$k, $v] ({}; . + {$k: $v})] as [$template, $rules]
  | $template
  | nth(10; recurse(
     reduce [range((. | length) - 1) * 2][] as $i (
       .; .[:$i+1] + $rules[.[$i:$i+2]] + .[$i+1:]
     ))
    ) | split("") | [group_by(.)[] | length] | sort | last - first
#+end_src

#+RESULTS:
: 2745
